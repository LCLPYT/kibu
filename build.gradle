plugins {
    id 'fabric-loom' version '1.1.8' apply false
    id 'maven-publish'
    id 'gradle-build-utils' version '1.1.0'
}

Properties props = loadProperties.call('publish.properties') as Properties

version = gitVersion.call()

def moduleDependencies(project, List<String> dependencies) {
    def deps = dependencies.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }

    project.dependencies {
        deps.each {
            api it
        }
    }

    // As we manually handle the maven artifacts, we need to also manually specify the deps.
    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    deps.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

allprojects {
    group = project.maven_group

    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()

        maven {
            url "https://repo.lclpnet.work/repository/internal"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        /* other Java dependencies */
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        withSourcesJar()
    }

    [jar, sourcesJar].each {
        it.from(rootProject.file('LICENSE')) {
            rename { "${it}_${project.archivesBaseName}"}
        }
    }

    publishing {
        setupPublishRepositories(repositories, props)
    }
}

subprojects {
    version = getSubprojectVersion(project)

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.archivesBaseName

                artifact remapJar
                artifact remapSourcesJar
            }
        }
    }

    publishMavenJavaPublicationToMavenRepository.onlyIf {
        return !checkProjectIsDeployed(project, props)
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archivesBaseName

            artifact remapJar
            artifact remapSourcesJar

            pom {
                name = 'Kibu'
                description = 'Modding library for FabricMC.'

                // add subproject as maven compile dependency
                withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    subprojects.each {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

// main jar must remap after all the subprojects
subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api project(path: it.path, configuration: "namedElements")
        }
    }
}

// add subprojects as nested jar to the main jar
remapJar {
    afterEvaluate {
        subprojects.each {
            nestedJars.from project(it.path).tasks.named("remapJar")
        }
    }
}

def checkProjectIsDeployed(Project project, Properties props) {
    def url = "${getDeployUrl(props)}/${project.group.toString().replace('.', '/')}/${project.archivesBaseName}/maven-metadata.xml"

    String xml
    try {
        xml = new URL(url).text
    } catch (Throwable ignored) {
        return false
    }

    def meta = new groovy.xml.XmlSlurper().parseText(xml)
    def versions = meta.versioning.versions.version*.text()

    return versions.contains(project.version)
}

def getDeployUrl(Properties props) {
    Map<String, String> env = System.getenv()

    if (env.containsKey("DEPLOY_URL")) {
        return env.get("DEPLOY_URL")
    } else if (props.containsKey('mavenHost')) {
        return props.getProperty('mavenHost')
    } else {
        return "file:///${rootProject.projectDir}/repo"
    }
}

static def getSubprojectVersion(Project project) {
    def version = project.getProperties()["${project.getName()}-version"]
    if (!version) {
        throw new IllegalStateException("Could not find version for project ${project.getName()}")
    }
    return version
}

def setupPublishRepositories(RepositoryHandler repositories, Properties props) {
    repositories.maven {
        Map<String, String> env = System.getenv()

        if (Arrays.stream("DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
            credentials {
                username env.get("DEPLOY_USER")
                password env.get("DEPLOY_PASSWORD")
            }
        } else if (Arrays.stream("mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
            credentials {
                username props.getProperty('mavenUser')
                password props.getProperty('mavenPassword')
            }
        }

        url getDeployUrl(props)
    }
}
