plugins {
    id 'fabric-loom' version '1.1.8' apply false
    id 'maven-publish'
    id 'gradle-build-utils' version '1.1.0'
}

Properties props = loadProperties.call('publish.properties') as Properties

version = gitVersion.call()

allprojects {
    group = project.maven_group

    apply plugin: "fabric-loom"

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()

        maven {
            url "https://repo.lclpnet.work/repository/internal"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
        modImplementation "work.lclpnet.mods:mplugins:${project.mplugins_version}"

        /* other Java dependencies */
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version,
                    "mplugins_version": project.mplugins_version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        withSourcesJar()
    }

    [jar, sourcesJar].each {
        it.from(rootProject.file('LICENSE')) {
            rename { "${it}_${project.archivesBaseName}"}
        }
    }
}

subprojects {
    version = getSubprojectVersion(project)

    publishing {
        publications {
            "mavenJava_${project.name}" (MavenPublication) {
                artifactId = project.archivesBaseName

                artifact remapJar
                artifact remapSourcesJar
            }
        }
    }
}

// configure the maven publication
publishing {
    publications {
        "mavenJava_${project.name}" (MavenPublication) {
            artifactId = project.archivesBaseName

            artifact remapJar
            artifact remapSourcesJar

            pom {
                name = 'Kibu'
                description = 'Modding library for FabricMC.'
            }
        }
    }

    repositories {
        maven {
            Map<String, String> env = System.getenv()

            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            } else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${rootProject.projectDir}/repo"
            }
        }
    }
}

static def getSubprojectVersion(Project project) {
    def version = project.getProperties()["${project.getName()}-version"]
    if (!version) {
        throw new IllegalStateException("Could not find version for project ${project.getName()}")
    }
    return version
}
